from typing import Any
from zope.interface import implementer

from pyramid.interfaces import IExceptionResponse
from pyramid.response import Response


@implementer(IExceptionResponse)
class HTTPException(Response, Exception):
    code: int
    title: str
    explanation: str
    empty_body: bool
    detail: str | None
    message: str | None  # copy of detail
    comment: str | None
    def __init__(  # type:ignore[override]
        self,
        detail: str | None = ...,
        headers: list[tuple[str, str]] | None = ...,
        comment: str | None = ...,
        body_template: object | None = ...,
        json_formatter: object | None = ...,
        **kw: Any
    ) -> None: ...
    def __str__(self) -> str: ...  # type:ignore[override]  # noqa: Y029
    def prepare(self, environ: dict[str, Any]) -> None: ...

WSGIHTTPException = HTTPException

class HTTPError(HTTPException): ...
class HTTPRedirection(HTTPException): ...
class HTTPSuccessful(HTTPException): ...
class HTTPOk(HTTPSuccessful): ...
class HTTPCreated(HTTPSuccessful): ...
class HTTPAccepted(HTTPSuccessful): ...
class HTTPNonAuthoritativeInformation(HTTPSuccessful): ...
class HTTPNoContent(HTTPSuccessful): ...
class HTTPResetContent(HTTPSuccessful): ...
class HTTPPartialContent(HTTPSuccessful): ...

class _HTTPMove(HTTPRedirection):
    def __init__(
        self,
        location: str = ...,
        detail: str | None = ...,
        headers: list[tuple[str, str]] | None = ...,
        comment: str | None = ...,
        body_template: object | None = ...,
        **kw: Any
    ): ...

class HTTPMultipleChoices(_HTTPMove): ...
class HTTPMovedPermanently(_HTTPMove): ...
class HTTPFound(_HTTPMove): ...
class HTTPSeeOther(_HTTPMove): ...
class HTTPNotModified(HTTPRedirection): ...
class HTTPUseProxy(_HTTPMove): ...
class HTTPTemporaryRedirect(_HTTPMove): ...
class HTTPPermanentRedirect(_HTTPMove): ...
class HTTPClientError(HTTPError): ...
class HTTPBadRequest(HTTPClientError): ...
class HTTPUnauthorized(HTTPClientError): ...
class HTTPPaymentRequired(HTTPClientError): ...

class HTTPForbidden(HTTPClientError):
    result: Any
    def __init__(
        self,
        detail: str | None = ...,
        headers: list[tuple[str, str]] | None = ...,
        comment: str | None = ...,
        body_template: object | None = ...,
        result: Any | None = ...,
        **kw: Any
    ): ...

class HTTPNotFound(HTTPClientError): ...
class HTTPMethodNotAllowed(HTTPClientError): ...
class HTTPNotAcceptable(HTTPClientError): ...
class HTTPProxyAuthenticationRequired(HTTPClientError): ...
class HTTPRequestTimeout(HTTPClientError): ...
class HTTPConflict(HTTPClientError): ...
class HTTPGone(HTTPClientError): ...
class HTTPLengthRequired(HTTPClientError): ...
class HTTPPreconditionFailed(HTTPClientError): ...
class HTTPRequestEntityTooLarge(HTTPClientError): ...
class HTTPRequestURITooLong(HTTPClientError): ...
class HTTPUnsupportedMediaType(HTTPClientError): ...
class HTTPRequestRangeNotSatisfiable(HTTPClientError): ...
class HTTPExpectationFailed(HTTPClientError): ...
class HTTPUnprocessableEntity(HTTPClientError): ...
class HTTPLocked(HTTPClientError): ...
class HTTPFailedDependency(HTTPClientError): ...
class HTTPPreconditionRequired(HTTPClientError): ...
class HTTPTooManyRequests(HTTPClientError): ...
class HTTPRequestHeaderFieldsTooLarge(HTTPClientError): ...
class HTTPServerError(HTTPError): ...
class HTTPInternalServerError(HTTPServerError): ...
class HTTPNotImplemented(HTTPServerError): ...
class HTTPBadGateway(HTTPServerError): ...
class HTTPServiceUnavailable(HTTPServerError): ...
class HTTPGatewayTimeout(HTTPServerError): ...
class HTTPVersionNotSupported(HTTPServerError): ...
class HTTPInsufficientStorage(HTTPServerError): ...
# NOTE: If we were feeling cute we could add an overload for
#       each status code, returning the correct HTTPException
def exception_response(status_code: int, **kw: Any) -> HTTPException: ...
status_map: dict[int, HTTPException]
